@page "/verify"
@inject AuthService AuthService
@inject NavigationManager Navigation

<h1>Verify Email</h1>

@if (!verified)
{
    if (!string.IsNullOrEmpty(error))
    {
        <div class="alert alert-danger">@error</div>
    }
    <EditForm Model="this" OnValidSubmit="HandleVerify">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label class="form-label">Username</label>
            <InputText class="form-control" @bind-Value="username" />
        </div>
        <div class="mb-3">
            <label class="form-label">Verification Code</label>
            <InputText class="form-control" @bind-Value="code" />
        </div>
        <button type="submit" class="btn btn-primary">Verify</button>
    </EditForm>
}
else
{
    <p>Account verified. You can now <NavLink href="/login">log in</NavLink>.</p>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "user")]
    public string? UserQuery { get; set; }

    private string username = string.Empty;
    private string code = string.Empty;
    private bool verified;
    private string? error;

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(UserQuery))
        {
            username = UserQuery;
        }
    }

    private async Task HandleVerify()
    {
        var result = await AuthService.VerifyEmailAsync(username, code);
        if (!result)
        {
            error = "Invalid code.";
        }
        else
        {
            verified = true;
        }
    }
}
